using System;
using System.Text;

namespace test_createkey
{
    class Program
    {
        //my Key
        static byte[] key = new byte[] { 0x2b, 0x28, 0xab, 0x09, 0x7e, 0xae, 0xf7, 0xcf, 0x15, 0xd2, 0x15, 0x4f, 0x16, 0xa6, 0x88, 0x3c };
        //Rcon
        static readonly byte[] Rcon = new byte[10] { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
        //Sbox 
        private static readonly byte[] SBox =
            {
            0x63,  0x7c,  0x77,  0x7b,  0xf2,  0x6b,  0x6f,  0xc5,  0x30,  0x01,  0x67,  0x2b,  0xfe,  0xd7,  0xab,  0x76,
            0xca,  0x82,  0xc9,  0x7d,  0xfa,  0x59,  0x47,  0xf0,  0xad,  0xd4,  0xa2,  0xaf,  0x9c,  0xa4,  0x72,  0xc0,
            0xb7,  0xfd,  0x93,  0x26,  0x36,  0x3f,  0xf7,  0xcc,  0x34,  0xa5,  0xe5,  0xf1,  0x71,  0xd8,  0x31,  0x15,
            0x04,  0xc7,  0x23,  0xc3,  0x18,  0x96,  0x05,  0x9a,  0x07,  0x12,  0x80,  0xe2,  0xeb,  0x27,  0xb2,  0x75,
            0x09,  0x83,  0x2c,  0x1a,  0x1b,  0x6e,  0x5a,  0xa0,  0x52,  0x3b,  0xd6,  0xb3,  0x29,  0xe3,  0x2f,  0x84,
            0x53,  0xd1,  0x00,  0xed,  0x20,  0xfc,  0xb1,  0x5b,  0x6a,  0xcb,  0xbe,  0x39,  0x4a,  0x4c,  0x58,  0xcf,
            0xd0,  0xef,  0xaa,  0xfb,  0x43,  0x4d,  0x33,  0x85,  0x45,  0xf9,  0x02,  0x7f,  0x50,  0x3c,  0x9f,  0xa8,
            0x51,  0xa3,  0x40,  0x8f,  0x92,  0x9d,  0x38,  0xf5,  0xbc,  0xb6,  0xda,  0x21,  0x10,  0xff,  0xf3,  0xd2,
            0xcd,  0x0c,  0x13,  0xec,  0x5f,  0x97,  0x44,  0x17,  0xc4,  0xa7,  0x7e,  0x3d,  0x64,  0x5d,  0x19,  0x73,
            0x60,  0x81,  0x4f,  0xdc,  0x22,  0x2a,  0x90,  0x88,  0x46,  0xee,  0xb8,  0x14,  0xde,  0x5e,  0x0b,  0xdb,
            0xe0,  0x32,  0x3a,  0x0a,  0x49,  0x06,  0x24,  0x5c,  0xc2,  0xd3,  0xac,  0x62,  0x91,  0x95,  0xe4,  0x79,
            0xe7,  0xc8,  0x37,  0x6d,  0x8d,  0xd5,  0x4e,  0xa9,  0x6c,  0x56,  0xf4,  0xea,  0x65,  0x7a,  0xae,  0x08,
            0xba,  0x78,  0x25,  0x2e,  0x1c,  0xa6,  0xb4,  0xc6,  0xe8,  0xdd,  0x74,  0x1f,  0x4b,  0xbd,  0x8b,  0x8a,
            0x70,  0x3e,  0xb5,  0x66,  0x48,  0x03,  0xf6,  0x0e,  0x61,  0x35,  0x57,  0xb9,  0x86,  0xc1,  0x1d,  0x9e,
            0xe1,  0xf8,  0x98,  0x11,  0x69,  0xd9,  0x8e,  0x94,  0x9b,  0x1e,  0x87,  0xe9,  0xce,  0x55,  0x28,  0xdf,
            0x8c,  0xa1,  0x89,  0x0d,  0xbf,  0xe6,  0x42,  0x68,  0x41,  0x99,  0x2d,  0x0f,  0xb0,  0x54,  0xbb,  0x16
        };
        //Padding input 16 byte
        public static byte[] padPlaintext(byte[] plaintext, int blockSize)
        {
            int paddingLength = blockSize - (plaintext.Length % blockSize);
            byte paddingByte = (byte)paddingLength;
            byte[] paddedPlaintext = new byte[plaintext.Length + paddingLength];
            Array.Copy(plaintext, 0, paddedPlaintext, 0, plaintext.Length);
            for (int i = plaintext.Length; i < paddedPlaintext.Length; i++)
            {
                paddedPlaintext[i] = (byte)paddingByte;
            }
            return paddedPlaintext;
        }

        //Subbytes 
        public static byte[,] SubBytes(byte[,] input)
        {
            byte[,] result = new byte[4, 4];

            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 4; col++)
                {
                    byte b = input[row, col];
                    byte s = SBox[b];
                    result[row, col] = s;
                }
            }
            return result;
        }
        //MixColumns
        private static byte[,] MixColumns(byte[,] state)
        {
            byte[,] result = new byte[4, 4];

            for (int i = 0; i < 4; i++)
            {
                byte s0 = state[0, i], s1 = state[1, i], s2 = state[2, i], s3 = state[3, i];

                result[0, i] = (byte)(GF28Multiply(s0, 0x02) ^ GF28Multiply(s1, 0x03) ^ s2 ^ s3);
                result[1, i] = (byte)(s0 ^ GF28Multiply(s1, 0x02) ^ GF28Multiply(s2, 0x03) ^ s3);
                result[2, i] = (byte)(s0 ^ s1 ^ GF28Multiply(s2, 0x02) ^ GF28Multiply(s3, 0x03));
                result[3, i] = (byte)(GF28Multiply(s0, 0x03) ^ s1 ^ s2 ^ GF28Multiply(s3, 0x02));
            }

            return result;
        }
        private static byte GF28Multiply(byte a, byte b)
        {
            byte p = 0;
            byte hbit = 0;

            for (int i = 0; i < 8; i++)
            {
                if ((b & 1) == 1)
                {
                    p ^= a;
                }

                hbit = (byte)(a & 0x80);
                a <<= 1;

                if (hbit == 0x80)
                {
                    a ^= 0x1B;
                }

                b >>= 1;
            }

            return p;
        }
        //Convert 1D array to 2D array
        public static byte[,] convertArray(byte[] input)
        {
            byte[,] output = new byte[4, 4];
            int position = 0;
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    output[i, j] = input[position];
                    position++;
                }
            }
            return output;

        }
        //Add RoundKey
        public static byte[,] AddRoundKey(byte[,] state, byte[,] roundKey)
        {
            for (int c = 0; c < 4; c++)
            {
                for (int r = 0; r < 4; r++)
                {
                    state[r, c] ^= roundKey[r, c];
                }
            }
            return state;
        }
        //ShiftRows
        public static byte[,] shiftRows(byte[,] input)
        {
            byte[,] output = new byte[4, 4];
            for (int i = 0; i < 4; i++)
            {
                output[0, i] = input[0, i];
            }
            //second line
            output[1, 0] = input[1, 1];
            output[1, 1] = input[1, 2];
            output[1, 2] = input[1, 3];
            output[1, 3] = input[1, 0];
            //third line
            output[2, 0] = input[2, 2];
            output[2, 1] = input[2, 3];
            output[2, 2] = input[2, 0];
            output[2, 3] = input[2, 1];
            //fourth line
            output[3, 0] = input[3, 3];
            output[3, 1] = input[3, 0];
            output[3, 2] = input[3, 1];
            output[3, 3] = input[3, 2];
            return output;
        }
        //Create new roundkey
        public static byte[] key_xorArray(byte[] arr1, byte[] arr2, int round)
        {
            byte[] result = new byte[arr1.Length];
            byte[] SubRcon = new byte[4];
            SubRcon[0] = Rcon[round+1];
            for (int i = 1; i < 4; i++)
            {
                SubRcon[i] = 0x00;
            }
            Console.WriteLine("Rcon: " + BitConverter.ToString(SubRcon));
            for (int i = 0; i < arr1.Length; i++)
            {
                result[i] = (byte)(arr1[i] ^ arr2[i] ^ SubRcon[i]);
            }
            //Console.WriteLine("XOR of both arrays: " + BitConverter.ToString(result));
            return result;
        }//XOR use Rcon
        public static byte[] key_rotWord(byte[] arr)
        {
            byte[] result = new byte[arr.Length];
            result[0] = arr[1];
            result[1] = arr[2];
            result[2] = arr[3];
            result[3] = arr[0];
            //Console.WriteLine("Rotword arrays: " + BitConverter.ToString(result));
            return result;
        }//Rotword
        public static byte[] key_SubBytes(byte[] state)
        {
            byte[] result = new byte[4];


            for (int i = 0; i < 4; i++)
            {
                byte b = state[i];
                byte s = SBox[b];
                result[i] = s;
            }
            //Console.WriteLine("Subbytes arrays: " + BitConverter.ToString(result));
            return result;
        }//Subbytes
        public static byte[] key_xorNormal(byte[] arr1, byte[] arr2)
        {
            byte[] result = new byte[arr1.Length];
            for (int i = 0; i < arr1.Length; i++)
            {
                result[i] = (byte)(arr1[i] ^ arr2[i]);
            }
            //Console.WriteLine("XOR of both arrays: " + BitConverter.ToString(result));
            return result;
        }//XOR without rcon
        public static byte[] firstColumnKey(byte[] previewkey, int round)
        {
            byte[,] keyArray2D = convertArray(previewkey);
            byte[] lastPieceKey = new byte[4];
            byte[] firstPieceKey = new byte[4];

            int n = 0;
            for (int i = 3; i < 16; i = i + 4)
            {
                lastPieceKey[n] = previewkey[i];
                n++;
            }
            n = 0;
            for (int j = 0; j < 16; j = j + 4)
            {
                firstPieceKey[n] = previewkey[j];
                n++;
            }
            //Console.WriteLine("first: " + BitConverter.ToString(firstPieceKey));//dlt
            byte[] roted = key_rotWord(lastPieceKey);
            //Console.WriteLine("rot: " + BitConverter.ToString(roted));//dlt

            byte[] subed = key_SubBytes(roted);
            //Console.WriteLine("sub: " + BitConverter.ToString(subed));//dlt

            byte[] xored = key_xorArray(firstPieceKey, subed, round-1);
            //Console.WriteLine("xor: " + BitConverter.ToString(xored));//dlt

            //byte[,] result = new byte[4, 4];
            //Console.WriteLine("first: " + BitConverter.ToString(xored));
            //Console.WriteLine("\n\n\n");
            return xored;
        }//First column of new key
        public static byte[] getColumnOfKey(byte[] key, int column)
        {
            byte[] output = new byte[4];
            int position = 0;
            for (int i = 0; i < 16; i = i + 4)
            {
                output[position] = key[column + i - 1];
                position++;
            }
            Console.WriteLine("Column "+column+": " + BitConverter.ToString(output));
            return output;
        }//Get column in key (key is 1D array)
        public static byte[,] rowToColumn(byte[,] input)
        {
            byte[,] output = new byte[4, 4];
            int rows = input.GetLength(0);
            int cols = input.GetLength(1);

            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    output[i, j] = input[j, i];
                }
            }

            return output;
        }//Matrix ^ T
        public static byte[] un_convertArray(byte[,] array)
        {
            byte[] result = new byte[16];
            int position = 0;
            for(int i = 0; i < 4; i++)
            {
                for(int j = 0; j < 4; j++)
                {
                    result[position] = array[i, j];
                    position++;
                }
            }
            return result;
        }//
        public static byte[,] nextRoundKey(byte[,] previewKey, int round)
        {
            //Console.WriteLine("-----------------round: "+round);
            byte[] c2_old = getColumnOfKey(un_convertArray(previewKey), 2);
            //Console.WriteLine("unconvert 2: " + BitConverter.ToString(c2_old));

            byte[] c3_old = getColumnOfKey(un_convertArray(previewKey), 3);
            //Console.WriteLine("unconvert 3 : " + BitConverter.ToString(c3_old));

            byte[] c4_old = getColumnOfKey(un_convertArray(previewKey), 4);
            //Console.WriteLine("unconvert 4 : " + BitConverter.ToString(c4_old));

            byte[] c1_new = firstColumnKey(un_convertArray(previewKey), round);// round?
            //Console.WriteLine("unconvert1 : " + BitConverter.ToString(c1_new));

            byte[] c2_new = key_xorNormal(c1_new, c2_old);
            //Console.WriteLine("new column 2 : " + BitConverter.ToString(c2_new));
            byte[] c3_new = key_xorNormal(c2_new, c3_old);
            //Console.WriteLine("new column 3 : " + BitConverter.ToString(c3_new));
            byte[] c4_new = key_xorNormal(c3_new, c4_old);
            //Console.WriteLine("new column 4 : " + BitConverter.ToString(c4_new));
            byte[,] result = new byte[4, 4];
            for (int i = 0; i < 4; i++)
            {
                result[0, i] = c1_new[i];
                result[1, i] = c2_new[i];
                result[2, i] = c3_new[i];
                result[3, i] = c4_new[i];
            }
            result = rowToColumn(result);
            //Console.WriteLine("\n\n\n");
            for (int i = 0; i < result.GetLength(0); i++)
            {
                for (int j = 0; j < result.GetLength(1); j++)
                {
                    Console.Write(result[i, j].ToString("X2") + " ");
                }
                Console.WriteLine();
            }
            return result;
        }
        static void Main(string[] args)
        {


            byte[] data = new byte[16] { 0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34 };

            string str = "Hello bro World!";
            byte[] byteArray = Encoding.UTF8.GetBytes(str);
            Console.WriteLine("string input: " + BitConverter.ToString(byteArray));
            //string strings = Encoding.UTF8.GetString(data);
            //Console.WriteLine(strings);

            //Convert data to 2D array
            byte[,] convertArray_key = convertArray(key);
            byte[,] convertArray_data = convertArray(data);

            //Convertsely 


            
            byte[,] step1 = new byte[4, 4];
            byte[,] step2 = new byte[4, 4];
            byte[,] step3 = new byte[4, 4];
            byte[,] step4 = new byte[4, 4];
            byte[,] roundkey = new byte[4, 4];                
            step1 = AddRoundKey(convertArray_data, convertArray_key);

            for(int i = 0; i < 10; i++)
            {
                convertArray_key =  nextRoundKey(convertArray_key, i);
                //Subbytes
                step2 = SubBytes(step1);
                //Shiftrows
                step3 = shiftRows(step2);
                //Mixcolumn
                step4 = MixColumns(step3);
                //Addroundkey
                step5 = AddRoundKey(convertArray_data, convertArray_key);
                convertArray_data = step4;
            }
            //AddroundKey
            step1 = AddRoundKey(convertArray_data, convertArray_key);
            //Subbytes
            step2 = SubBytes(step1);
            //Shiftrows
            step3 = shiftRows(step2);
            //Mixcolumn
            step4 = MixColumns(step3);
            //AddRoundKey
            byte[,] roundKey0 = nextRoundKey(convertArray_key, 0);
            byte[,] step5 = AddRoundKey(step4, roundKey0);


            for (int i = 0; i < step5.GetLength(0); i++)
            {
                for (int j = 0; j < step5.GetLength(1); j++)
                {
                    Console.Write(step5[i, j].ToString("X2") + " ");
                }
                Console.WriteLine();
            }





            /*
            
            byte[] data = new byte[16] { 0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34 };
            byte[,] dataConverted = convertArray(data);
            byte[,] s1 = convertArray(key);
            byte[,] s2 = AddRoundKey(dataConverted, s1);
            byte[,] s3 = SubBytes(s2);
            byte[,] s4 = shiftRows(s3);
            byte[,] s5 = MixColumns(s4);
            byte[,] a = convertArray(key);
            //byte[,] a
            //byte[,] a
            for (int i = 0; i < a.GetLength(0); i++)
            {
                for (int j = 0; j < a.GetLength(1); j++)
                {
                    Console.Write(a[i, j].ToString("X2") + " ");
                }
                Console.WriteLine();
            }
            byte[] c2_old = getColumnOfKey(key, 2);
            byte[] c3_old = getColumnOfKey(key, 3);
            byte[] c4_old = getColumnOfKey(key, 4);
            byte[] c1_new = firstColumnKey(key,0);
            byte[] c2_new = key_xorNormal(firstColumnKey(key,0), c2_old);
            byte[] c3_new = key_xorNormal(c2_new, c3_old);
            byte[] c4_new = key_xorNormal(c3_new, c4_old);
            byte[,] result = new byte[4, 4];
            for(int i= 0; i < 4; i++)
            {
                result[0, i] = c1_new[i];
                result[1, i] = c2_new[i];
                result[2, i] = c3_new[i];
                result[3, i] = c4_new[i];
            }
            result = rowToColumn(result);
            Console.WriteLine("\n\n\n");
            for (int i = 0; i < result.GetLength(0); i++)
            {
                for (int j = 0; j < result.GetLength(1); j++)
                {
                    Console.Write(result[i, j].ToString("X2") + " ");
                }
                Console.WriteLine();
            }
            //ghép các module lại sau 

           
            byte[,] converted = convertArray(key);
            for (int i = 0; i < converted.GetLength(0); i++)
            {
                for (int j = 0; j < converted.GetLength(1); j++)
                {
                    Console.Write(converted[i, j].ToString("X2") + " ");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n\n\n");
            byte[] unconvert = un_convertArray(converted);
            Console.WriteLine("unconvert: " + BitConverter.ToString(unconvert));
            byte[,] x = nextRoundKey(convertArray(key), 0);
            x = nextRoundKey(x, 1);
            x = nextRoundKey(x, 2);

            */













        }

    }
}
